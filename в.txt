1. Программирование - это решение задач с помощью вычислительной техники.
2. Императивное программирование - это решение задачи шаг за шагом (алгоритм).
3. Декларативное программирование - получение результата сразу (например результат функции).
4. let count = NaN; console.log({ count }, typeof count); //number
5. const emptyObject = null; console.log({ emptyObject }), typeof emptyObject); //object
6. console.log(parseFloat('5mm')); //5
7. console.log(parseFloat('(5)')); // NaN
8. console.log(parseFloat('[5]')); // NaN
9. Ещё один тип данных bigint //очень большое число (например 2 ** 53 - 1)
10. function () {} //есть объектный контекст this и их можно связывать с каким-либо объектом, экземпляром класса.
11. () => {} //нет this, нельзя привязать к объекту.
12. Среда исполнения , в которой встроен v8. Внутри неё компиляторы, транслитерация, интерпритаторы.
13. use strict - это директива, которая позволяет нам перевести компилятор и интерпритатор ЖСа в строгий режим. Запрещает устаревшие варианты синтаксиса.
14. Функция - абстракция преобразования значений.
15. Стек вызовов - область памяти, хранящая контекст вызова функции и адрес возврата.
16. Рекурсия - задание алгоритма вычисления функции через вызов ее самой (прямой или непрмой) или определение функции, через нее саму.
17. Коллекция - структура данных, служащая для хранения набора значений и предоставляющая доступ к ним (часто по индексам или ключам).
18. Массив - коллекция элементов, доступ к которым осуществляется по индексам. //const cities = ['Tehran', 'Yalta', 'Potsdam'];
19. Компонент - несколько программных объектов (например: функций, классов, монад, типов) объединенных и организованных по общему признаку.

//МОДУЛИ

20. Модуль - целостный, функционально полный, независимый компонент программной системы имеющий имя, интерфейс, реализацию.
21. Модульность повышает переиспользование кода. Упрощает интграцию компонентов. Улучшает компоновку и тестирование программ по частям.
22. Модули не должны использовать глобальные переменные, модифицировать базовые классы/прототипы/фунции ЯП, платформы и/или фреймворка.
23. Модули должны быть слабо связаны, а взаимодействовать друг с другом должны через внешнее АПИ или шину событий.
24. Библиотека - сборник программных объектов подготовленный для повторного использования. Библиотека более крупная логическая кода, чем компонент.

//Объекты

25. Объект или экземпляр - структура данных, содержащая состояние и методы, связанные с этим состоянием. Объект может быть создан как литерал `{}` или экземпляр класса
`new ClassName()` или как экземпляр прототипа `new Constructor()` или возвращен из фабрики.

//Object 
	const person = {
	  name: 'Marcus',
	  city: 'Roma',
	  born: 121,
	};
//Instance
	const person = new Person('Marcus', 'Roma', 121);

26. Класс - программная абстракция, объедниняющая состояние и поведение (свойства и методы) своих экземпляров (инстансов).
27. Инстанциирование - создание объекта (экземпляра) или выделение памяти для структуры данных.
28. Область видимости - часть кода, из которой "виден" идентификатор.

//Контексты

29. Лексический контекст - набор идентификаторов, связанных с определенными значениями в рамках функции или блока кода (в том числе блоков циклов, условий и тд.).
30. Объектный контекст функции - объект, связанный со служебным идентификатором this. Все функции, кроме стрелочных, могут быть связаны с this. Объект связан с this, если
функция привязана через `bind`, `apply` или `call`.
31. Глобальный контекст - глобальный объект-справочник. Если идентификатор не находится ни в одном из вложенных лексических контекстов, то будет выполнен его поиск в глобальном
контексте (global, window, sandbox).
32. 










